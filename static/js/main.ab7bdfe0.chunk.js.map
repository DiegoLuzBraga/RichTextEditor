{"version":3,"sources":["components/TextEditor/useTextEditor.ts","components/CodeElement/CodeElement.tsx","components/Leaf/Leaf.tsx","components/Button/Button.tsx","components/TextEditor/TextEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useTextEditor","editor","useMemo","withReact","createEditor","useState","type","children","text","underline","bold","italic","code","value","setValue","markByFormat","format","isMarked","Editor","removeMark","addMark","marks","renderElement","useCallback","props","element","attributes","CodeElement","DefaultElement","renderLeaf","leaf","Leaf","handleKeyDown","event","ctrlKey","preventDefault","key","active","handleCode","handleBold","handleItalic","handleUnderline","Button","handler","onClick","className","TextEditor","onChange","onKeyDown","placeholder","spellCheck","autoFocus","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab7bdfe0.chunk.js","sourcesContent":["import { useMemo, useState, useCallback } from \"react\";\r\nimport { withReact } from \"slate-react\";\r\nimport { createEditor, Node, Transforms, Editor, Text } from \"slate\";\r\nimport { CodeElement, DefaultElement } from \"../CodeElement/CodeElement\";\r\nimport { Leaf } from \"../Leaf/Leaf\";\r\n\r\ntype Formatation = \"bold\" | \"code\";\r\n\r\nexport function useTextEditor() {\r\n  const editor = useMemo(() => withReact(createEditor()), []);\r\n  const [value, setValue] = useState<Node[]>([\r\n    {\r\n      type: \"paragraph\",\r\n      children: [\r\n        { text: \"This is \" },\r\n        { text: \"my \", underline: true },\r\n        { text: \"rich\", bold: true },\r\n        { text: \" text editor!\", italic: true },\r\n        { text: \" Enjoy!\", code: true }\r\n      ]\r\n    }\r\n  ]);\r\n\r\n  const markByFormat = (format: \"code\" | \"bold\" | \"italic\" | \"underline\") => {\r\n    const isActive = isMarked(format);\r\n\r\n    if (isActive) {\r\n      Editor.removeMark(editor, format);\r\n    } else {\r\n      Editor.addMark(editor, format, true);\r\n    }\r\n  };\r\n\r\n  const isMarked = (format: \"code\" | \"bold\" | \"italic\" | \"underline\") => {\r\n    const marks = Editor.marks(editor);\r\n    return marks ? marks[format] : false;\r\n  };\r\n\r\n  function handleKeyDown(event: any) {\r\n    if (!event.ctrlKey) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n\r\n    switch (event.key) {\r\n      case \"`\": {\r\n        markByFormat(\"code\");\r\n        break;\r\n      }\r\n\r\n      case \"b\": {\r\n        markByFormat(\"bold\");\r\n        break;\r\n      }\r\n\r\n      case \"i\": {\r\n        markByFormat(\"italic\");\r\n        break;\r\n      }\r\n\r\n      case \"u\": {\r\n        markByFormat(\"underline\");\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const renderElement = useCallback(props => {\r\n    switch (props.element.type) {\r\n      case \"code\":\r\n        return CodeElement(props);\r\n      default:\r\n        return DefaultElement({ ...props });\r\n    }\r\n  }, []);\r\n\r\n  const renderLeaf = useCallback(props => {\r\n    return Leaf(props);\r\n  }, []);\r\n\r\n  return {\r\n    editor,\r\n    value,\r\n    setValue,\r\n    handleKeyDown,\r\n    renderElement,\r\n    renderLeaf,\r\n    code: {\r\n      active: isMarked(\"code\"),\r\n      handleCode: () => markByFormat(\"code\")\r\n    },\r\n    bold: {\r\n      active: isMarked(\"bold\"),\r\n      handleBold: () => markByFormat(\"bold\")\r\n    },\r\n    italic: {\r\n      active: isMarked(\"italic\"),\r\n      handleItalic: () => markByFormat(\"italic\")\r\n    },\r\n    underline: {\r\n      active: isMarked(\"underline\"),\r\n      handleUnderline: () => markByFormat(\"underline\")\r\n    }\r\n  } as const;\r\n}\r\n","import React from \"react\";\r\n\r\nexport const CodeElement = (props: any): JSX.Element => {\r\n  return (\r\n    <pre {...props.attributes}>\r\n      <code>{props.children}</code>\r\n    </pre>\r\n  );\r\n};\r\n\r\nexport const DefaultElement = (props: any): JSX.Element => {\r\n  return <p {...props.attributes}>{props.children}</p>;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Leaf = (props: any): JSX.Element => {\r\n  const leafStyle = () => {\r\n    if (props.leaf.bold) {\r\n      return <strong>{props.children}</strong>;\r\n    }\r\n\r\n    if (props.leaf.code) {\r\n      return <code>{props.children}</code>;\r\n    }\r\n\r\n    if (props.leaf.italic) {\r\n      return <em>{props.children}</em>;\r\n    }\r\n\r\n    if (props.leaf.underline) {\r\n      return <u>{props.children}</u>;\r\n    }\r\n    return props.children;\r\n  };\r\n  return <span {...props.attributes}>{leafStyle()}</span>;\r\n};\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\n\r\ninterface Props {\r\n  active: boolean;\r\n  handler: () => void;\r\n  text: string;\r\n}\r\n\r\nexport const Button = ({ active, handler, text }: Props) => {\r\n  return (\r\n    <button onClick={handler} className={active ? \"active\" : \"inactive\"}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Slate, Editable } from \"slate-react\";\r\nimport { useTextEditor } from \"./useTextEditor\";\r\nimport \"./TextEditor.scss\";\r\nimport { Button } from \"../Button/Button\";\r\n\r\nexport const TextEditor = () => {\r\n  const {\r\n    value,\r\n    editor,\r\n    setValue,\r\n    handleKeyDown,\r\n    renderElement,\r\n    renderLeaf,\r\n    code,\r\n    bold,\r\n    italic,\r\n    underline\r\n  } = useTextEditor();\r\n\r\n  return (\r\n    <div className=\"textEditor\">\r\n      <Slate value={value} editor={editor} onChange={value => setValue(value)}>\r\n        <div className=\"buttons\">\r\n          <Button\r\n            handler={() => bold.handleBold()}\r\n            text=\"B\"\r\n            active={bold.active}\r\n          />\r\n          <Button\r\n            handler={() => italic.handleItalic()}\r\n            text=\"I\"\r\n            active={italic.active}\r\n          />\r\n          <Button\r\n            handler={() => underline.handleUnderline()}\r\n            text=\"U\"\r\n            active={underline.active}\r\n          />\r\n          <Button\r\n            handler={() => code.handleCode()}\r\n            text={\"< >\"}\r\n            active={code.active}\r\n          />\r\n        </div>\r\n        <Editable\r\n          className=\"editable\"\r\n          renderElement={renderElement}\r\n          renderLeaf={renderLeaf}\r\n          onKeyDown={(event: any) => handleKeyDown(event)}\r\n          placeholder=\"Enter some textâ€¦\"\r\n          spellCheck\r\n          autoFocus\r\n        />\r\n      </Slate>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport { TextEditor } from \"./components/TextEditor/TextEditor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TextEditor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}